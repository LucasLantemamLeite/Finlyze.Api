// <auto-generated />
using System;
using Finlyze.Migrations.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Finlyze.Migrations.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250708215935_Troca da coluna de Id de Guid para Int")]
    partial class TrocadacolunadeIddeGuidparaInt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Finlyze.Domain.Entity.AppLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("AppLog", (string)null);
                });

            modelBuilder.Entity("Finlyze.Domain.Entity.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserAccountId");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Finlyze.Domain.Entity.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserAccount", (string)null);
                });

            modelBuilder.Entity("Finlyze.Domain.Entity.AppLog", b =>
                {
                    b.OwnsOne("Finlyze.Domain.ValueObject.AppLogObjects.LogCreateAt", "LogCreateAt", b1 =>
                        {
                            b1.Property<int>("AppLogId")
                                .HasColumnType("Int");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("DateTime")
                                .HasColumnName("LogCreateAt");

                            b1.HasKey("AppLogId");

                            b1.ToTable("AppLog");

                            b1.WithOwner()
                                .HasForeignKey("AppLogId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.AppLogObjects.LogDescription", "LogDescription", b1 =>
                        {
                            b1.Property<int>("AppLogId")
                                .HasColumnType("Int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("Nvarchar(200)")
                                .HasColumnName("LogDescription");

                            b1.HasKey("AppLogId");

                            b1.ToTable("AppLog");

                            b1.WithOwner()
                                .HasForeignKey("AppLogId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.AppLogObjects.LogTitle", "LogTitle", b1 =>
                        {
                            b1.Property<int>("AppLogId")
                                .HasColumnType("Int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("Nvarchar(100)")
                                .HasColumnName("LogTitle");

                            b1.HasKey("AppLogId");

                            b1.ToTable("AppLog");

                            b1.WithOwner()
                                .HasForeignKey("AppLogId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.AppLogObjects.LogType", "LogType", b1 =>
                        {
                            b1.Property<int>("AppLogId")
                                .HasColumnType("Int");

                            b1.Property<int>("Value")
                                .HasColumnType("Int")
                                .HasColumnName("LogType");

                            b1.HasKey("AppLogId");

                            b1.ToTable("AppLog");

                            b1.WithOwner()
                                .HasForeignKey("AppLogId");
                        });

                    b.Navigation("LogCreateAt")
                        .IsRequired();

                    b.Navigation("LogDescription")
                        .IsRequired();

                    b.Navigation("LogTitle")
                        .IsRequired();

                    b.Navigation("LogType")
                        .IsRequired();
                });

            modelBuilder.Entity("Finlyze.Domain.Entity.Transaction", b =>
                {
                    b.HasOne("Finlyze.Domain.Entity.UserAccount", "UserAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Finlyze.Domain.ValueObject.TransactionObjects.Amount", "Amount", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("Int");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Amount");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transaction");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.TransactionObjects.TransactionCreateAt", "TransactionCreateAt", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("Int");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("DateTime")
                                .HasColumnName("TransactionCreateAt");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transaction");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.TransactionObjects.TransactionDescription", "TransactionDescription", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("Int");

                            b1.Property<string>("Value")
                                .HasColumnType("Nvarchar(300)")
                                .HasColumnName("TransactionDescription");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transaction");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.TransactionObjects.TransactionTitle", "TransactionTitle", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("Int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("Nvarchar(100)")
                                .HasColumnName("TransactionTitle");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transaction");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.TransactionObjects.TransactionUpdateAt", "TransactionUpdateAt", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("Int");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("DateTime")
                                .HasColumnName("TransactionUpdateAt");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transaction");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.TransactionObjects.TypeTransaction", "TypeTransaction", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("Int");

                            b1.Property<int>("Value")
                                .HasColumnType("Int")
                                .HasColumnName("TypeTransaction");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transaction");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("TransactionCreateAt")
                        .IsRequired();

                    b.Navigation("TransactionDescription");

                    b.Navigation("TransactionTitle")
                        .IsRequired();

                    b.Navigation("TransactionUpdateAt")
                        .IsRequired();

                    b.Navigation("TypeTransaction")
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Finlyze.Domain.Entity.UserAccount", b =>
                {
                    b.OwnsOne("Finlyze.Domain.ValueObject.UserAccountObject.Active", "Active", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("Bit")
                                .HasColumnName("Active");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccount");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.UserAccountObject.BirthDate", "BirthDate", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("Date")
                                .HasColumnName("BirthDate");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccount");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.UserAccountObject.CreateAt", "CreateAt", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("DateTime")
                                .HasColumnName("CreateAt");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccount");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.UserAccountObject.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("Nvarchar(254)")
                                .HasColumnName("Email");

                            b1.HasKey("UserAccountId");

                            b1.HasIndex(new[] { "Value" }, "Unique_Key_Email_UserAccount")
                                .IsUnique();

                            b1.ToTable("UserAccount");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.UserAccountObject.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("Nvarchar(100)")
                                .HasColumnName("Name");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccount");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.UserAccountObject.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("Nvarchar(255)")
                                .HasColumnName("Password");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccount");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.UserAccountObject.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("Nvarchar(20)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserAccountId");

                            b1.HasIndex(new[] { "Value" }, "Unique_Key_PhoneNumber_UserAccount")
                                .IsUnique();

                            b1.ToTable("UserAccount");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.UserAccountObject.Role", "Role", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("Int")
                                .HasColumnName("Role");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccount");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.Navigation("Active")
                        .IsRequired();

                    b.Navigation("BirthDate")
                        .IsRequired();

                    b.Navigation("CreateAt")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();

                    b.Navigation("Role")
                        .IsRequired();
                });

            modelBuilder.Entity("Finlyze.Domain.Entity.UserAccount", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
